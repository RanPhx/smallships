buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1+', changing: true
    }
}

plugins {
    id "com.matthewprenger.cursegradle" version "1.4.0"
    id "com.github.johnrengelman.shadow" version "7.1.0"
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'com.github.johnrengelman.shadow'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.

version = '2.0.0-Alpha-0.3'
group = 'com.talhanation.smallships' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'smallships-1.19'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: 'official', version: '1.19'
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            property 'forge.logging.console.level', 'debug'

            Random rnd = new Random()
            args = ['--username', 'Player' + rnd.nextInt(100)]

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'examplemod', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    minecraft 'net.minecraftforge:forge:1.19-41.0.107'

    shadow fg.deobf("de.maxhenkel.corelib:corelib:1.19-1.0.2:api")
    runtimeOnly fg.deobf("de.maxhenkel.corelib:corelib:1.19-1.0.2")
    runtimeOnly fg.deobf("de.maxhenkel.corelib:corelib:1.19-1.0.2:javadoc")

}
repositories {
    maven {
        name = "henkelmax.public"
        url = 'https://maven.maxhenkel.de/repository/public'
    }
    mavenLocal()
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

jar.finalizedBy('reobfJar')

artifacts {
    archives shadowJar
}

jar.finalizedBy('reobfJar')

shadowJar {
    project.configurations.shadow.setTransitive(true)
    configurations = [project.configurations.shadow]
    relocate 'de.maxhenkel.corelib', "de.maxhenkel.smallships.corelib"
}

reobf {
    shadowJar {}
}
dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0'
    testImplementation 'org.mockito:mockito-core:4.11.0' // Für Mocks
}

test {
    useJUnitPlatform()
}

// Optional: Für Integrationstests
sourceSets {
    integrationTest {
        java {
            srcDir file('src/integrationTest/java')
        }
    }
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

tasks.register('integrationTest', Test) {
    description = 'Runs integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    useJUnitPlatform()
}
